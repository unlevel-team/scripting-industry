<?xml version="1.0" encoding="UTF-8"?>
<data>
  <topic name="classes">
    <title value="Classes on python" />
    <!-- <docLink value="https://www.w3schools.com/tags/tag_title.asp" /> -->
    <description>
      <![CDATA[
Classes on python
      ]]>
    </description>
    <concept name="classes-and-objects">
      <title value="Classes and Objects" />
      <docLink value="https://www.w3schools.com/python/python_classes.asp" />
      <description>
        <![CDATA[
Python is an object <strong>oriented programming language</strong>.<br>
Almost everything in Python is an object, with its properties and methods.<br>
A Class is like an object constructor, or a <strong>"blueprint" for creating objects</strong>.<br>
To create a class, use the keyword <code>class</code>:<br>
<pre>
class MyClass:
  x = 5
</pre>
All classes have a function called <code>__init__()</code>, which is <strong>always executed when the class is being initiated</strong>.<br>
Use the <code>__init__()</code> function to assign values to object properties, or other operations that are necessary to do when the object is being created.<br>
Objects can also contain methods. Methods in objects are functions that belong to the object.<br>
<strong>The self Parameter</strong><br>
The <code>self</code> parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.<br>
It does not have to be named <code>self</code> , you can call it whatever you like, but it has to be the <strong>first parameter of any function in the class</strong>.<br><br>
<strong>Modify Object Properties</strong><br>
You can modify properties on objects like this:<br>
<pre>
p1.age = 40
</pre>
<strong>Delete Object Properties</strong><br>
You can delete properties on objects by using the <code>del</code> keyword:<br>
<pre>
del p1.age
</pre>
<strong>Delete Objects</strong><br>
You can delete objects by using the <code>del</code> keyword.<br>
<pre>
del p1
</pre>
<strong>The pass Statement</strong><br>
<code>class</code> definitions cannot be empty, but if you for some reason have a <code>class</code> definition with no content, 
put in the <code>pass</code> statement to avoid getting an error.
<pre>
class Person:
  pass
</pre>
        ]]>
      </description>
      <code language="python">
        <![CDATA[
# Use the words mysillyobject and abc instead of self
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()
        ]]>
      </code>
    </concept>
    <concept name="inheritance">
      <title value="Inheritance" />
      <docLink value="https://www.w3schools.com/python/python_inheritance.asp" />
      <description>
        <![CDATA[
Inheritance allows us to define a class that inherits all the methods and properties from another class.<br>
<strong>Parent class</strong> is the class being inherited from, also called base class.<br>
<strong>Child class</strong> is the class that inherits from another class, also called derived class.<br>
Any class can be a parent class, so the syntax is the same as creating any other class.<br>
To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class.
<pre>
class Student(Person):
  pass
</pre>
<strong>Add the __init__() Function</strong><br>
When you add the <code>__init__()</code> function, the child class will no longer inherit the parent's <code>__init__()</code> function.<br>
To keep the inheritance of the parent's <code>__init__()</code> function, add a call to the parent's <code>__init__()</code> function.<br>
<pre>
class Student(Person):
  def __init__(self, fname, lname):
    Person.__init__(self, fname, lname)
</pre>
<strong>the super() Function</strong><br>
Python also has a <code>super()</code> function that will make the child class inherit all the methods and properties from its parent.
<pre>
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
</pre>
        ]]>
      </description>
      <code language="python">
        <![CDATA[
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

class Student(Person):
  def __init__(self, fname, lname):
    Person.__init__(self, fname, lname)

# Use the Person class to create an object, and then execute the printname method:
x = Person("John", "Doe")
x.printname()

# Use the Student class to create an object, and then execute the printname method
y = Student("Mike", "Olsen")
y.printname()
        ]]>
      </code>
      <code language="python">
        <![CDATA[
class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

  def welcome(self):
    print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)
        ]]>
      </code>
    </concept>
  </topic>
</data>