<?xml version="1.0" encoding="UTF-8"?>
<data>
  <topic name="variables">
    <title value="Javascript variables" />
    <!-- <docLink value="https://www.w3schools.com/tags/tag_title.asp" /> -->
    <description>
      <![CDATA[
        The Javascript variables
      ]]>
    </description>
    <concept name="variables">
      <title value="Variables" />
      <docLink value="https://www.w3schools.com/js/js_variables.asp" />
      <description>
        <![CDATA[
There are 3 ways to declare a JavaScript variable:
<ul>
  <li>Using <code>var</code></li>
  <li>Using <code>let</code></li>
  <li>Using <code>const</code></li>
</ul>

Variables are containers for storing data (values). <br>

All JavaScript <strong>variables</strong> must be <strong>identified</strong> with <strong>unique names</strong>. <br>
These unique names are called <strong>identifiers</strong>. <br>

Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume). JavaScript identifiers are <strong>case-sensitive</strong>.<br>
The general rules for constructing names for variables (unique identifiers) are:
<ul>
  <li>Names can contain letters, digits, underscores, and dollar signs.</li>
  <li>Names must begin with a letter</li>
  <li>Names can also begin with $ and _ (but we will not use it in this tutorial)</li>
  <li>Names are case sensitive (y and Y are different variables)</li>
  <li>Reserved words (like JavaScript keywords) cannot be used as names</li>
</ul>

Creating a variable in JavaScript is called "declaring" a variable. <br>
After the declaration, the variable has no value (technically it has the value of <code>undefined</code>). <br>

In computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.<br>
A variable declared without a value will have the value undefined. <br>

If you re-declare a JavaScript variable, it will not lose its value. <br>
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
var x = 5;
var y = 6;
var z = x + y;
        ]]>
      </code>
      <code language="javascript">
        <![CDATA[
// You can declare many variables in one statement.
var person = "John Doe", carName = "Volvo", price = 200;
        ]]>
      </code>
      <code language="javascript">
        <![CDATA[
// A declaration can span multiple lines
var person = "John Doe",
carName = "Volvo",
price = 200;
        ]]>
      </code>
      <code language="javascript">
        <![CDATA[
// If you re-declare a JavaScript variable, it will not lose its value.
var carName = "Volvo";
var carName;
        ]]>
      </code>
    </concept>
    <concept name="let">
      <title value="let" />
      <docLink value="https://www.w3schools.com/js/js_let.asp" />
      <description>
        <![CDATA[
The <code>let</code> keyword was introduced in ES6 (2015).<br>
Variables defined with <code>let</code> cannot be Redeclared.<br>
Variables defined with <code>let</code> must be Declared before use.<br>
Variables defined with <code>let</code> have Block Scope.<br>
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
let x = "John Doe";
let x = 0;
// SyntaxError: 'x' has already been declared
        ]]>
      </code>
    </concept>
    <concept name="block-scope">
      <title value="Block scope" />
      <docLink value="https://www.w3schools.com/js/js_let.asp" />
      <description>
        <![CDATA[
Before ES6 (2015), JavaScript had only <strong>Global Scope</strong> and <strong>Function Scope</strong>.<br>
ES6 introduced two important new JavaScript keywords: <code>let</code> and <code>const</code>.<br>
These two keywords provide <strong>Block Scope</strong> in JavaScript.<br>
Variables declared inside a <code>{ }</code> block cannot be accessed from outside the block.
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
{
  let x = 2;
}
// x can NOT be used here
        ]]>
      </code>
      <code language="javascript">
        <![CDATA[
{
  var x = 2;
}
// x CAN be used here
        ]]>
      </code>
    </concept>
    <concept name="const">
      <title value="const" />
      <docLink value="https://www.w3schools.com/js/js_const.asp" />
      <description>
        <![CDATA[
The <code>const</code> keyword was introduced in ES6 (2015).<br>
Variables defined with <code>const</code> cannot be Redeclared.<br>
Variables defined with <code>const</code> cannot be Reassigned.<br>
Variables defined with <code>const</code> have Block Scope.<br>
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
// cannot be Reassigned
const PI = 3.141592653589793;
PI = 3.14;      // This will give an error
PI = PI + 10;   // This will also give an error
        ]]>
      </code>
    </concept>
  </topic>
</data>