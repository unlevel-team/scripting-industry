<?xml version="1.0" encoding="UTF-8"?>
<data>
  <topic name="functions">
    <title value="Functions on python" />
    <!-- <docLink value="https://www.w3schools.com/tags/tag_title.asp" /> -->
    <description>
      <![CDATA[
Functions on python
      ]]>
    </description>
    <concept name="functions">
      <title value="Functions" />
      <docLink value="https://www.w3schools.com/python/python_functions.asp" />
      <description>
        <![CDATA[
A function is a block of code which only runs when it is called.<br>
You can pass data, known as parameters, into a function.<br>
A function can return data as a result.<br>
In Python a function is defined using the <code>def</code> keyword.<br>
To call a function, use the function name followed by parenthesis.<br>
        ]]>
      </description>
      <code language="python">
        <![CDATA[
def my_function():
  print("Hello from a function")

my_function()
        ]]>
      </code>
    </concept>
    <concept name="arguments">
      <title value="Arguments" />
      <docLink value="https://www.w3schools.com/python/python_functions.asp" />
      <description>
        <![CDATA[
Information can be passed into functions as arguments.<br>
Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.<br>
The terms <strong>parameter</strong> and <strong>argument</strong> can be used for the same thing: information that are passed into a function.<br>
By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, 
you have to call the function with 2 arguments, not more, and not less.<br>
If you do not know how many arguments that will be passed into your function, add a <code>*</code> before the parameter name in the function definition.<br>
This way the function will receive a <strong>tuple</strong> of arguments, and can access the items accordingly.<br>
You can also send arguments with the <strong>key = value</strong> syntax.<br>
This way the order of the arguments does not matter.<br>
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: <code>**</code> before the parameter name in the function definition.<br>
This way the function will receive a dictionary of arguments, and can access the items accordingly.<br>
If we call the function without argument, it uses the default value.<br>
You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.
        ]]>
      </description>
      <code language="python">
        <![CDATA[
# This function expects 2 arguments, and gets 2 arguments
def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Emil", "Refsnes")
        ]]>
      </code>
      <code language="python">
        <![CDATA[
# If the number of arguments is unknown, add a * before the parameter name
def my_function(*kids):
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")
        ]]>
      </code>
      <code language="python">
        <![CDATA[
def my_function(child3, child2, child1):
  print("The youngest child is " + child3)

my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")
        ]]>
      </code>
      <code language="python">
        <![CDATA[
# If the number of keyword arguments is unknown, add a double ** before the parameter name
def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")
        ]]>
      </code>
      <code language="python">
        <![CDATA[
# The following example shows how to use a default parameter value
def my_function(country = "Norway"):
  print("I am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")
        ]]>
      </code>
      <code language="python">
        <![CDATA[
# if you send a List as an argument, it will still be a List when it reaches the function
def my_function(food):
  for x in food:
    print(x)

fruits = ["apple", "banana", "cherry"]

my_function(fruits)
        ]]>
      </code>
    </concept>
    <concept name="pass-statement">
      <title value="The pass Statement" />
      <docLink value="https://www.w3schools.com/python/python_functions.asp" />
      <description>
        <![CDATA[
<code>function</code> definitions cannot be empty, but if you for some reason have a <code>function</code> definition with no content, 
put in the <code>pass</code> statement to avoid getting an error.
        ]]>
      </description>
      <code language="python">
        <![CDATA[
def myfunction():
  pass
        ]]>
      </code>
    </concept>
    <concept name="recursion">
      <title value="Recursion" />
      <docLink value="https://www.w3schools.com/python/python_functions.asp" />
      <description>
        <![CDATA[
Python also accepts function recursion, which means a defined function can call itself.<br>
Recursion is a common mathematical and programming concept. It means that a function calls itself. 
This has the benefit of meaning that you can loop through data to reach a result.<br>
The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, 
or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and 
mathematically-elegant approach to programming.
        ]]>
      </description>
      <code language="python">
        <![CDATA[
def tri_recursion(k):
  if(k > 0):
    result = k + tri_recursion(k - 1)
    print(result)
  else:
    result = 0
  return result

print("\n\nRecursion Example Results")
tri_recursion(6)
        ]]>
      </code>
    </concept>
    <concept name="lambda">
      <title value="Lambda" />
      <docLink value="https://www.w3schools.com/python/python_lambda.asp" />
      <description>
        <![CDATA[
A lambda function is a small anonymous function.<br>
A lambda function can take any number of arguments, but can only have one expression.
<pre>
lambda arguments : expression
</pre>
The power of lambda is better shown when you use them as an anonymous function inside another function.<br>

        ]]>
      </description>
      <code language="python">
        <![CDATA[
# Add 10 to argument a, and return the result
x = lambda a : a + 10
print(x(5))

# Multiply argument a with argument b and return the result
y = lambda a, b : a * b
print(y(5, 6))

# Summarize argument a, b, and c and return the result
z = lambda a, b, c : a + b + c
print(z(5, 6, 2))
        ]]>
      </code>
      <code language="python">
        <![CDATA[
# Use the function definition to make a function that always doubles the number you send in
# Or, use the same function definition to make a function that always triples the number you send in
def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)
mytripler = myfunc(3)

print(mydoubler(11))
print(mytripler(11))
        ]]>
      </code>
    </concept>
  </topic>
</data>